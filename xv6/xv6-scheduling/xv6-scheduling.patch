diff --git a/base/xv6/.gitignore b/base/xv6/.gitignore
new file mode 100644
index 0000000..6c83cff
--- /dev/null
+++ b/base/xv6/.gitignore
@@ -0,0 +1,22 @@
+*.d
+*.o
+*.out
+
+# binaries and .asm files
+bootblock 
+entryother
+initcode
+kernel
+mkfs 
+kernel.sym
+xv6.img
+fs.img
+_*
+*.asm
+vectors.S 
+*.sym
+
+# Test files
+Makefile.test
+test*.c
+tests-out/
\ No newline at end of file
diff --git a/base/xv6/graph.pdf b/base/xv6/graph.pdf
new file mode 100644
index 0000000..d3cf9e1
Binary files /dev/null and b/base/xv6/graph.pdf differ
diff --git a/base/xv6/param.h b/base/xv6/param.h
index a7e90ef..fe38bfb 100644
--- a/base/xv6/param.h
+++ b/base/xv6/param.h
@@ -10,5 +10,5 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
+#define FSSIZE       20000  // size of file system in blocks
 
diff --git a/base/xv6/proc.c b/base/xv6/proc.c
index 806b1b1..b7611a8 100644
--- a/base/xv6/proc.c
+++ b/base/xv6/proc.c
@@ -88,6 +88,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
 
   release(&ptable.lock);
 
@@ -198,6 +199,7 @@ fork(void)
   }
   np->sz = curproc->sz;
   np->parent = curproc;
+  np->tickets = curproc->tickets;
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -325,16 +327,36 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+  int trun;     // process with trun will run
+  // cprintf("In scheduler from main");
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
-
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    trun = 0;
+    for (int i = 0; i < NPROC; i++) {
+      if(ptable.proc[i].state == RUNNABLE && ptable.proc[i].tickets == 1) {
+        trun = 1;
+        break;
+      }
+    }
+    // for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    //   // cprintf("Checking tickets. p->tickets: %d\n", p->tickets);
+    //   if(p->tickets == 1 && p->state == RUNNABLE) {
+    //     // trun = 1;
+    //     break;
+    //   }
+    // }
+    // cprintf("trun: %d\n", trun);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+      // cprintf("checking for runnable process. p->tickets: %d\n", p->tickets);
+      if(p->tickets != trun || p->state != RUNNABLE)
         continue;
+      // trun = trun;
+      // if(p->state != RUNNABLE)
+      //   continue;
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -342,7 +364,7 @@ scheduler(void)
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
+      // cprintf("about to schedule: %s, pid: %d\n", p->name, p->pid);
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
@@ -532,3 +554,24 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+void
+myprocinfo(struct pstat *ps)
+{
+  int i;
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for(i = 0; i < NPROC; i++) {
+    p = &ptable.proc[i];
+    ps->pid[i] = p -> pid;
+    if(p -> state == UNUSED)
+      ps -> inuse[i] = 0;
+    else
+      ps -> inuse[i] = 1;
+    
+    ps->tickets[i] = p->tickets;
+    ps->ticks[i] = 0;
+  }
+  release(&ptable.lock);
+}
\ No newline at end of file
diff --git a/base/xv6/proc.h b/base/xv6/proc.h
index 1647114..0e64b8f 100644
--- a/base/xv6/proc.h
+++ b/base/xv6/proc.h
@@ -1,3 +1,5 @@
+#include "pstat.h"
+
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -49,6 +51,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;                 // scheduling priority
+  int ticks;                   // clock ticks
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +60,5 @@ struct proc {
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
+void myprocinfo(struct pstat *ps);
diff --git a/base/xv6/pstat.h b/base/xv6/pstat.h
new file mode 100644
index 0000000..5e0f2cd
--- /dev/null
+++ b/base/xv6/pstat.h
@@ -0,0 +1,13 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC];     // the PID of each process 
+  int ticks[NPROC];   // the number of ticks each process has accumulated 
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/base/xv6/syscall.c b/base/xv6/syscall.c
index ee85261..f63eae8 100644
--- a/base/xv6/syscall.c
+++ b/base/xv6/syscall.c
@@ -103,8 +103,16 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
+extern int sys_mprotect(void);
+extern int sys_munprotect(void);
 
 static int (*syscalls[])(void) = {
+[SYS_mprotect] sys_mprotect,
+[SYS_munprotect] sys_munprotect,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
 [SYS_wait]    sys_wait,
diff --git a/base/xv6/syscall.h b/base/xv6/syscall.h
index bc5f356..e3b5eaf 100644
--- a/base/xv6/syscall.h
+++ b/base/xv6/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
+#define SYS_mprotect 24
+#define SYS_munprotect 25
diff --git a/base/xv6/sysfile.c b/base/xv6/sysfile.c
index bfe61b7..9179e80 100644
--- a/base/xv6/sysfile.c
+++ b/base/xv6/sysfile.c
@@ -15,6 +15,7 @@
 #include "sleeplock.h"
 #include "file.h"
 #include "fcntl.h"
+#include "pstat.h"
 
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
@@ -282,6 +283,73 @@ create(char *path, short type, short major, short minor)
   return ip;
 }
 
+int
+mystrcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+
+int
+sys_settickets(void)
+{
+  // char *numstr = "";
+  int num;
+  struct proc *curproc = myproc();
+  
+  begin_op();
+  if(argint(0, &num) < 0){
+    end_op();
+    return -1;
+  }
+  // cprintf("settickets arg is %d\n", num);
+  if (num != 0 && num != 1) {
+    end_op();
+    return -1;
+  }
+  curproc->tickets = num;
+  // if (mystrcmp(numstr, "0") == 0)
+  //   curproc->tickets = 0;
+  // else if (mystrcmp(numstr, "0") == 0)
+  //   curproc->tickets = 1;
+  // else {
+  //   end_op();
+  //   return -1;
+  // }
+  
+  return 0;
+}
+struct pstat pst;
+
+int 
+sys_getpinfo(void)
+{
+  struct pstat * ps;
+  begin_op();
+  if (argptr(0, (void *)&ps, sizeof(*ps)) < 0) {
+    end_op();
+    return -1;
+  }
+  if (ps == ((void *)0)) {
+    return -1;
+  }
+  myprocinfo(ps);
+  return 0;
+}
+
+int
+sys_mprotect(void)
+{
+  return 0;
+}
+
+int 
+sys_munprotect(void)
+{
+  return 0;
+}
+
 int
 sys_open(void)
 {
diff --git a/base/xv6/user.h b/base/xv6/user.h
index 4f99c52..390bd25 100644
--- a/base/xv6/user.h
+++ b/base/xv6/user.h
@@ -1,3 +1,5 @@
+#include "pstat.h"
+
 struct stat;
 struct rtcdate;
 
@@ -23,6 +25,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int number);
+int getpinfo(struct pstat *);
+int mprotect(void *addr, int len);
+int munprotect(void *addr, int len);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/base/xv6/usys.S b/base/xv6/usys.S
index 8bfd8a1..398743f 100644
--- a/base/xv6/usys.S
+++ b/base/xv6/usys.S
@@ -8,6 +8,10 @@
     int $T_SYSCALL; \
     ret
 
+SYSCALL(mprotect)
+SYSCALL(munprotect)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
 SYSCALL(fork)
 SYSCALL(exit)
 SYSCALL(wait)
