diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..1b359c7
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+.gdbinit
\ No newline at end of file
diff --git a/base/xv6/.gitignore b/base/xv6/.gitignore
new file mode 100644
index 0000000..1532194
--- /dev/null
+++ b/base/xv6/.gitignore
@@ -0,0 +1,26 @@
+*.d
+*.o
+*.out
+
+# binaries and .asm files
+bootblock 
+entryother
+initcode
+kernel
+mkfs 
+kernel.sym
+xv6.img
+fs.img
+_*
+*.asm
+vectors.S 
+*.sym
+
+# Test files
+Makefile.test
+test*.c
+tests-out/
+
+# System files
+
+.__afs*
\ No newline at end of file
diff --git a/base/xv6/Makefile b/base/xv6/Makefile
index 09d790c..e96aec5 100644
--- a/base/xv6/Makefile
+++ b/base/xv6/Makefile
@@ -76,7 +76,7 @@ AS = $(TOOLPREFIX)gas
 LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
-CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
+CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -Og -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
@@ -153,7 +153,7 @@ _%: %.o $(ULIB)
 _forktest: forktest.o $(ULIB)
 	# forktest has less library code linked in - needs to be small
 	# in order to be able to max out the proc table.
-	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o umalloc.o
 	$(OBJDUMP) -S _forktest > forktest.asm
 
 mkfs: mkfs.c fs.h
@@ -167,9 +167,13 @@ mkfs: mkfs.c fs.h
 
 UPROGS=\
 	_cat\
+	_checkfork\
 	_echo\
 	_forktest\
 	_grep\
+	_test_1\
+	_test_4\
+	_hello\
 	_init\
 	_kill\
 	_ln\
@@ -217,7 +221,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
diff --git a/base/xv6/checkfork.c b/base/xv6/checkfork.c
new file mode 100644
index 0000000..dcc0197
--- /dev/null
+++ b/base/xv6/checkfork.c
@@ -0,0 +1,15 @@
+#include "types.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int pid = fork();
+  if (pid == 0) {
+    printf(1, "In child...\n");
+    exit();
+  }
+  wait();
+  printf(1, "Child finished. In parent...\n");
+  exit();
+}
diff --git a/base/xv6/defs.h b/base/xv6/defs.h
index 82fb982..cd30a28 100644
--- a/base/xv6/defs.h
+++ b/base/xv6/defs.h
@@ -103,6 +103,8 @@ int             pipewrite(struct pipe*, char*, int);
 
 //PAGEBREAK: 16
 // proc.c
+int             clone(void(*fcn)(void *, void *), void *arg1, void *arg2, void *stack);
+int             join(void **stack);
 int             cpuid(void);
 void            exit(void);
 int             fork(void);
diff --git a/base/xv6/hello.c b/base/xv6/hello.c
new file mode 100644
index 0000000..0e454d2
--- /dev/null
+++ b/base/xv6/hello.c
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+  printf(1, "hello %s\n", argv[1]);
+  exit();
+}
diff --git a/base/xv6/param.h b/base/xv6/param.h
index a7e90ef..fe38bfb 100644
--- a/base/xv6/param.h
+++ b/base/xv6/param.h
@@ -10,5 +10,5 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
+#define FSSIZE       20000  // size of file system in blocks
 
diff --git a/base/xv6/proc.c b/base/xv6/proc.c
index 806b1b1..34c6539 100644
--- a/base/xv6/proc.c
+++ b/base/xv6/proc.c
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include <stdio.h>
 
 struct {
   struct spinlock lock;
@@ -38,10 +39,10 @@ struct cpu*
 mycpu(void)
 {
   int apicid, i;
-  
+
   if(readeflags()&FL_IF)
     panic("mycpu called with interrupts enabled\n");
-  
+
   apicid = lapicid();
   // APIC IDs are not guaranteed to be contiguous. Maybe we should have
   // a reverse map, or reserve a register to store &cpus[i].
@@ -51,7 +52,6 @@ mycpu(void)
   }
   panic("unknown apicid\n");
 }
-
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
 struct proc*
@@ -105,7 +105,7 @@ found:
   // Set up new context to start executing at forkret,
   // which returns to trapret.
   sp -= 4;
-  *(uint*)sp = (uint)trapret;
+ *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
@@ -124,7 +124,7 @@ userinit(void)
   extern char _binary_initcode_start[], _binary_initcode_size[];
 
   p = allocproc();
-  
+
   initproc = p;
   if((p->pgdir = setupkvm()) == 0)
     panic("userinit: out of memory?");
@@ -138,7 +138,6 @@ userinit(void)
   p->tf->eflags = FL_IF;
   p->tf->esp = PGSIZE;
   p->tf->eip = 0;  // beginning of initcode.S
-
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
@@ -160,23 +159,145 @@ growproc(int n)
 {
   uint sz;
   struct proc *curproc = myproc();
+  struct proc *p;
+  int result = 0;
 
   sz = curproc->sz;
   if(n > 0){
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
+      result = -1;
   } else if(n < 0){
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
+      result = -1;
+  }
+  acquire(&ptable.lock);
+  if(result == 0){
+        curproc->sz = sz;
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+                 if(p->pgdir == curproc->pgdir){
+                          p->sz = curproc->sz;
+                }
+        }
   }
-  curproc->sz = sz;
+  release(&ptable.lock);
   switchuvm(curproc);
   return 0;
 }
 
+// Clone function
+int
+clone(void(*fcn)(void *, void *), void *arg1, void *arg2, void *stack)
+{
+
+  int i, pid;
+  struct proc *curproc = myproc();
+  struct proc *np;
+
+  // check if user stack is page alligned
+  if((uint)stack % PGSIZE != 0){
+          return -1;
+  }
+
+  // check that stack lies within process address space
+  if((curproc->sz - (uint) stack) < PGSIZE){
+    return -1;
+  }
+
+ // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+
+  // give same size and address space
+  np->parent = curproc;
+  np->sz = curproc->sz;
+  np->pgdir = curproc->pgdir;
+
+  // start the new stack at top
+  uint *new_stack = (uint *) (((uint) stack) + PGSIZE);
+  new_stack -= 1;
+  *new_stack = (uint)arg2;
+  new_stack -= 1;
+  *new_stack = (uint)arg1;
+  new_stack -= 1;
+
+  // create a buffer for fcn
+  void *temp = (void *)0xffffffff;
+  *new_stack = (uint)temp;
+
+  *np->tf = *curproc->tf;  // copy parent and child trapframes to be the same
+
+  np->tf->eax = 0; // clear eax
+  np->tf->eip = (uint) fcn;  // put fcn in eip
+  np->tf->esp = (uint) new_stack;  // load stack pointer into esp
+
+
+  // rest is from fork, no change needed
+  for(i = 0; i < NOFILE; i++)
+    if(curproc->ofile[i])
+      np->ofile[i] = filedup(curproc->ofile[i]);
+  np->cwd = idup(curproc->cwd);
+
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+
+  pid = np->pid;
+
+  acquire(&ptable.lock);
+
+  np->state = RUNNABLE;
+
+  release(&ptable.lock);
+
+  return pid;
+}
+
+int
+join(void **stack)
+{
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != curproc || curproc->pgdir != p->pgdir) // added to make sure pgdir are the same
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        pid = p->pid;
+        // different from wait here, actually create the stack to be used
+        *stack = (void *) PGROUNDDOWN(p->tf->esp);
+        kfree(p->kstack);
+        p->kstack = 0;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
-// Caller must set state of returned proc to RUNNABLE.
+// Caller must set state of returned proc to RUNN
 int
 fork(void)
 {
@@ -220,7 +341,6 @@ fork(void)
 
   return pid;
 }
-
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
@@ -266,22 +386,22 @@ exit(void)
   sched();
   panic("zombie exit");
 }
-
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
 wait(void)
 {
   struct proc *p;
+  struct proc *np;
   int havekids, pid;
   struct proc *curproc = myproc();
-  
+
   acquire(&ptable.lock);
   for(;;){
     // Scan through table looking for exited children.
     havekids = 0;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
+      if(p->parent != curproc || p->pgdir == curproc->pgdir)  // make sure pgdir are different
         continue;
       havekids = 1;
       if(p->state == ZOMBIE){
@@ -289,7 +409,13 @@ wait(void)
         pid = p->pid;
         kfree(p->kstack);
         p->kstack = 0;
-        freevm(p->pgdir);
+        // loop through all processes and make sure addr space shared
+        for(np = ptable.proc; np < &ptable.proc[NPROC]; np++){
+                if(np != p && np->pgdir == p->pgdir){
+                        freevm(p->pgdir);
+                }
+        }
+        p->pgdir = 0;
         p->pid = 0;
         p->parent = 0;
         p->name[0] = 0;
@@ -310,7 +436,6 @@ wait(void)
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
   }
 }
-
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -325,7 +450,7 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+
   for(;;){
     // Enable interrupts on this processor.
     sti();
@@ -354,7 +479,6 @@ scheduler(void)
 
   }
 }
-
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -408,8 +532,7 @@ forkret(void)
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
-
-  // Return to "caller", actually trapret (see allocproc).
+// Return to "caller", actually trapret (see allocproc).
 }
 
 // Atomically release lock and sleep on chan.
@@ -418,7 +541,7 @@ void
 sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   if(p == 0)
     panic("sleep");
 
@@ -450,7 +573,6 @@ sleep(void *chan, struct spinlock *lk)
     acquire(lk);
   }
 }
-
 //PAGEBREAK!
 // Wake up all processes sleeping on chan.
 // The ptable lock must be held.
@@ -495,7 +617,6 @@ kill(int pid)
   release(&ptable.lock);
   return -1;
 }
-
 //PAGEBREAK: 36
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
@@ -532,3 +653,4 @@ procdump(void)
     cprintf("\n");
   }
 }
+
diff --git a/base/xv6/pstat.h b/base/xv6/pstat.h
new file mode 100644
index 0000000..5e0f2cd
--- /dev/null
+++ b/base/xv6/pstat.h
@@ -0,0 +1,13 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+
+#include "param.h"
+
+struct pstat {
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+  int tickets[NPROC]; // the number of tickets this process has
+  int pid[NPROC];     // the PID of each process 
+  int ticks[NPROC];   // the number of ticks each process has accumulated 
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/base/xv6/syscall.c b/base/xv6/syscall.c
index ee85261..111f595 100644
--- a/base/xv6/syscall.c
+++ b/base/xv6/syscall.c
@@ -82,6 +82,8 @@ argstr(int n, char **pp)
   return fetchstr(addr, pp);
 }
 
+extern int sys_clone(void);
+extern int sys_join(void);
 extern int sys_chdir(void);
 extern int sys_close(void);
 extern int sys_dup(void);
@@ -105,6 +107,8 @@ extern int sys_write(void);
 extern int sys_uptime(void);
 
 static int (*syscalls[])(void) = {
+[SYS_clone]   sys_clone,
+[SYS_join]    sys_join,
 [SYS_fork]    sys_fork,
 [SYS_exit]    sys_exit,
 [SYS_wait]    sys_wait,
diff --git a/base/xv6/syscall.h b/base/xv6/syscall.h
index bc5f356..1e275f7 100644
--- a/base/xv6/syscall.h
+++ b/base/xv6/syscall.h
@@ -1,4 +1,6 @@
 // System call numbers
+#define SYS_clone 22
+#define SYS_join 23
 #define SYS_fork    1
 #define SYS_exit    2
 #define SYS_wait    3
diff --git a/base/xv6/sysproc.c b/base/xv6/sysproc.c
index 0686d29..72dccff 100644
--- a/base/xv6/sysproc.c
+++ b/base/xv6/sysproc.c
@@ -7,6 +7,39 @@
 #include "mmu.h"
 #include "proc.h"
 
+int
+sys_clone(void)
+{
+        void *a1, *a2, *a3;
+        void(*f)(void *, void *);
+        if(argptr(1, (void*)&a1, sizeof(a1)) < 0){
+          return -1;
+        }
+        if(argptr(2, (void*)&a2, sizeof(a2)) < 0){
+          return -1;
+        }
+        if(argptr(3, (void*)&a3, sizeof(a3)) < 0){
+          return -1;
+        }
+        if(argptr(0, (void*)&f, sizeof(f)) < 0){
+                return -1;
+        }
+        return clone(f, a1, a2, a3);
+}
+
+int
+sys_join(void)
+{
+        void **stack;
+        if(argptr(0, (void *)&stack, sizeof(stack)) < 0){
+        return -1;
+        } 
+    return join(stack);
+}
+        
+
+ 
+
 int
 sys_fork(void)
 {
diff --git a/base/xv6/ulib.c b/base/xv6/ulib.c
index 8e1e1a2..a86a768 100644
--- a/base/xv6/ulib.c
+++ b/base/xv6/ulib.c
@@ -1,9 +1,89 @@
 #include "types.h"
+#include "mmu.h"
 #include "stat.h"
 #include "fcntl.h"
 #include "user.h"
 #include "x86.h"
 
+int
+thread_create(void (*start_routine) (void *, void *), void *arg1, void *arg2)
+{
+    // get size of space and header
+    uint h = sizeof(uint);
+    uint size = 2 * (uint)PGSIZE + h;
+
+    // create the memory and make sure its not zero
+    uint stack_space = (uint) malloc(size);
+    if(stack_space == 0){
+            return -1;
+    }
+
+    // create page to build the stack
+    uint page = stack_space + h;
+    uint final_stack = PGROUNDUP(page);
+    uint *top = (uint *) (final_stack - h);
+    *top = stack_space;
+
+    // call clone to create the thread, make sure -1 isn't returned
+    int create = clone(start_routine, arg1, arg2, (void *) final_stack);
+    if(create == -1){
+            free((void *)stack_space);
+    }
+
+    // return created thread pid
+    return create;
+}
+int
+thread_join()
+{
+        // initialize stack and call join
+        void *space;
+        int new_thread = join(&space);
+
+        // check if join returns -1
+        if(new_thread == -1){
+                return -1;
+        }
+
+        // set address space
+        uint *top = ((uint *) space) -1;
+        void *block = (void *) *top;
+
+        free(block);
+        return new_thread;
+}
+
+void
+lock_acquire(lock_t *lock)
+{
+        // spin and wait for lock to be free
+        while(xchg(&lock->flag, 1) != 0){
+                ;
+        }
+
+        // acquire the lock
+        if(lock->flag == 0){
+                lock->flag = 1;
+        }
+
+
+}
+
+void
+lock_release(lock_t *lock)
+{
+        // release lock
+        if(lock->flag == 1){
+                lock->flag = 0;
+        }
+}
+
+void
+lock_init(lock_t *lock)
+{
+        // set lock initially to zero
+        lock->flag = 0;
+}
 char*
 strcpy(char *s, const char *t)
 {
@@ -56,7 +136,7 @@ gets(char *buf, int max)
   char c;
 
   for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
+cc = read(0, &c, 1);
     if(cc < 1)
       break;
     buf[i++] = c;
@@ -91,7 +171,6 @@ atoi(const char *s)
     n = n*10 + *s++ - '0';
   return n;
 }
-
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
@@ -104,3 +183,4 @@ memmove(void *vdst, const void *vsrc, int n)
     *dst++ = *src++;
   return vdst;
 }
+                                 
diff --git a/base/xv6/user.h b/base/xv6/user.h
index 4f99c52..98b8a5f 100644
--- a/base/xv6/user.h
+++ b/base/xv6/user.h
@@ -1,5 +1,8 @@
 struct stat;
 struct rtcdate;
+typedef struct{
+        uint flag;
+} lock_t;
 
 // system calls
 int fork(void);
@@ -23,8 +26,14 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int clone(void(*fcn)(void *, void *), void*, void*, void *);
+int join(void **);
 // ulib.c
+int thread_create(void (*start_routine) (void *, void *), void *arg1, void *arg2);
+int thread_join();
+void lock_acquire(lock_t *lock);
+void lock_release(lock_t *lock);
+void lock_init(lock_t *lock);
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
 void *memmove(void*, const void*, int);
diff --git a/base/xv6/usys.S b/base/xv6/usys.S
index 8bfd8a1..c6a2880 100644
--- a/base/xv6/usys.S
+++ b/base/xv6/usys.S
@@ -8,6 +8,8 @@
     int $T_SYSCALL; \
     ret
 
+SYSCALL(clone)
+SYSCALL(join)
 SYSCALL(fork)
 SYSCALL(exit)
 SYSCALL(wait)